{"version":3,"sources":["components/TodoForm.js","components/Todo.js","components/TodoList.js","App.js","reportWebVitals.js","index.js"],"names":["TodoForm","addTodo","useState","id","task","completed","todo","setTodo","className","onSubmit","e","preventDefault","trim","uuidv4","TextField","label","type","name","value","onChange","target","Button","Todo","toggleComplete","removeTodo","ListItem","style","display","Checkbox","checked","onClick","Typography","variant","textDecoration","IconButton","TodoList","todos","List","map","LOCAL_STORAGE_KEY","App","setTodos","useEffect","storageTodos","JSON","parse","localStorage","getItem","setItem","stringify","padding","fontWeight","filter","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"4RAyCeA,MApCf,YAAgC,IAAZC,EAAW,EAAXA,QAAW,EACHC,mBAAS,CAC/BC,GAAI,GACJC,KAAM,GACNC,WAAW,IAJc,mBACpBC,EADoB,KACdC,EADc,KAsB3B,OACE,uBAAMC,UAAU,YAAYC,SAV9B,SAAsBC,GACpBA,EAAEC,iBAEEL,EAAKF,KAAKQ,SACZX,EAAQ,2BAAKK,GAAN,IAAYH,GAAIU,iBACvBN,EAAQ,2BAAKD,GAAN,IAAYF,KAAM,QAK3B,UACE,cAACU,EAAA,EAAD,CACEC,MAAM,OACNC,KAAK,OACLC,KAAK,OACLC,MAAOZ,EAAKF,KACZe,SAtBN,SAA+BT,GAG7BH,EAAQ,2BAAKD,GAAN,IAAYF,KAAMM,EAAEU,OAAOF,YAqBhC,cAACG,EAAA,EAAD,CAAQL,KAAK,SAAb,wB,qDCLOM,MA3Bf,YAAqD,IAArChB,EAAoC,EAApCA,KAAMiB,EAA8B,EAA9BA,eAAgBC,EAAc,EAAdA,WASpC,OACE,eAACC,EAAA,EAAD,CAAUC,MAAO,CAAEC,QAAS,QAA5B,UACE,cAACC,EAAA,EAAD,CAAUC,QAASvB,EAAKD,UAAWyB,QAVvC,WACEP,EAAejB,EAAKH,OAUlB,cAAC4B,EAAA,EAAD,CACEC,QAAQ,QACRN,MAAO,CACLO,eAAgB3B,EAAKD,UAAY,eAAiB,MAHtD,SAMGC,EAAKF,OAER,cAAC8B,EAAA,EAAD,CAAYJ,QAfhB,WACEN,EAAWlB,EAAKH,KAcd,SACE,cAAC,IAAD,UCNOgC,MAff,YAA0D,IAAtCC,EAAqC,EAArCA,MAAOZ,EAA8B,EAA9BA,WAAYD,EAAkB,EAAlBA,eACrC,OACE,cAACc,EAAA,EAAD,UACGD,EAAME,KAAI,SAAAhC,GAAI,OACb,cAAC,EAAD,CAEEA,KAAMA,EACNkB,WAAYA,EACZD,eAAgBA,GAHXjB,EAAKH,UCHdoC,EAAoB,wBAwDXC,MAtDf,WAAgB,IAAD,EACatC,mBAAS,IADtB,mBACNkC,EADM,KACCK,EADD,KAuCb,OApCAC,qBAAU,WAER,IAAMC,EAAeC,KAAKC,MAAMC,aAAaC,QAAQR,IACjDI,GACFF,EAASE,KAEV,IAEHD,qBAAU,WAERI,aAAaE,QAAQT,EAAmBK,KAAKK,UAAUb,MACtD,CAACA,IA0BF,sBAAK5B,UAAU,MAAf,UACE,cAACuB,EAAA,EAAD,CAAYL,MAAO,CAACwB,QAAS,GAAIC,WAAY,KAAKnB,QAAQ,KAA1D,2BAGA,cAAC,EAAD,CAAU/B,QA5Bd,SAAiBK,GAEfmC,EAAS,CAACnC,GAAF,mBAAW8B,QA2BjB,cAAC,EAAD,CACEA,MAAOA,EACPZ,WAZN,SAAoBrB,GAClBsC,EAASL,EAAMgB,QAAO,SAAA9C,GAAI,OAAIA,EAAKH,KAAOA,OAYtCoB,eA3BN,SAAwBpB,GACtBsC,EACEL,EAAME,KAAI,SAAAhC,GACR,OAAIA,EAAKH,KAAOA,EACP,2BACFG,GADL,IAEED,WAAYC,EAAKD,YAGdC,aC1BA+C,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.a0dfe798.chunk.js","sourcesContent":["import { Button, TextField } from \"@material-ui/core\";\r\nimport React, { useState } from \"react\";\r\nimport { v4 as uuidv4 } from \"uuid\"; \r\n\r\n\r\nfunction TodoForm({ addTodo }) {\r\n    const [todo, setTodo] = useState({\r\n      id: \"\",\r\n      task: \"\",\r\n      completed: false\r\n    });\r\n  \r\n    function handleTaskInputChange(e) {\r\n      // e.target.value contains new input from onChange\r\n      // event for input elements\r\n      setTodo({ ...todo, task: e.target.value });\r\n    }\r\n  \r\n    function handleSubmit(e) {\r\n      e.preventDefault(); // prevents browser refresh\r\n      // trim() gets rid of string whitespace\r\n      if (todo.task.trim()) {\r\n        addTodo({ ...todo, id: uuidv4() });\r\n        setTodo({ ...todo, task: \"\" });\r\n      }\r\n    }\r\n  \r\n    return (\r\n      <form className=\"todo-form\" onSubmit={handleSubmit}>\r\n        <TextField\r\n          label=\"Task\"\r\n          type=\"text\"\r\n          name=\"task\"\r\n          value={todo.task}\r\n          onChange={handleTaskInputChange}\r\n        />\r\n        <Button type=\"submit\">Submit</Button>\r\n      </form>\r\n    );\r\n  }\r\n\r\nexport default TodoForm;","import { Checkbox, IconButton, ListItem, Typography } from \"@material-ui/core\";\r\nimport CloseIcon from \"@material-ui/icons/Close\";\r\nimport React from \"react\";\r\n\r\nfunction Todo({ todo, toggleComplete, removeTodo }) {\r\n  function handleCheckboxClick() {\r\n    toggleComplete(todo.id);\r\n  }\r\n\r\n  function handleRemoveClick() {\r\n    removeTodo(todo.id);\r\n  }\r\n\r\n  return (\r\n    <ListItem style={{ display: \"flex\" }}>\r\n      <Checkbox checked={todo.completed} onClick={handleCheckboxClick} />\r\n      <Typography\r\n        variant=\"body1\"\r\n        style={{\r\n          textDecoration: todo.completed ? \"line-through\" : null\r\n        }}\r\n      >\r\n        {todo.task}\r\n      </Typography>\r\n      <IconButton onClick={handleRemoveClick}>\r\n        <CloseIcon />\r\n      </IconButton>\r\n    </ListItem>\r\n  );\r\n}\r\n\r\nexport default Todo;","import { List } from \"@material-ui/core\";\r\nimport React from \"react\";\r\nimport Todo from \"./Todo\";\r\n\r\nfunction TodoList({ todos, removeTodo, toggleComplete }) {\r\n  return (\r\n    <List>\r\n      {todos.map(todo => (\r\n        <Todo\r\n          key={todo.id}\r\n          todo={todo}\r\n          removeTodo={removeTodo}\r\n          toggleComplete={toggleComplete}\r\n        />\r\n      ))}\r\n    </List>\r\n  );\r\n}\r\n\r\nexport default TodoList;","import Typography from \"@material-ui/core/Typography\";\nimport React, { useEffect, useState } from \"react\";\nimport \"./App.css\";\nimport TodoForm from \"./components/TodoForm\";\nimport TodoList from \"./components/TodoList\";\n\nconst LOCAL_STORAGE_KEY = \"react-todo-list-todos\";\n\nfunction App() {\n  const [todos, setTodos] = useState([]);\n\n  useEffect(() => {\n    // fires when app component mounts to the DOM\n    const storageTodos = JSON.parse(localStorage.getItem(LOCAL_STORAGE_KEY));\n    if (storageTodos) {\n      setTodos(storageTodos);\n    }\n  }, []);\n\n  useEffect(() => {\n    // fires when todos array gets updated\n    localStorage.setItem(LOCAL_STORAGE_KEY, JSON.stringify(todos));\n  }, [todos]);\n\n  function addTodo(todo) {\n    // adds new todo to beginning of todos array\n    setTodos([todo, ...todos]);\n  }\n\n  function toggleComplete(id) {\n    setTodos(\n      todos.map(todo => {\n        if (todo.id === id) {\n          return {\n            ...todo,\n            completed: !todo.completed\n          };\n        }\n        return todo;\n      })\n    );\n  }\n\n  function removeTodo(id) {\n    setTodos(todos.filter(todo => todo.id !== id));\n  }\n\n  return (\n    <div className=\"App\">\n      <Typography style={{padding: 32, fontWeight: 700}}variant=\"h2\">\n        My To Do List\n      </Typography>\n      <TodoForm addTodo={addTodo} />\n      <TodoList\n        todos={todos}\n        removeTodo={removeTodo}\n        toggleComplete={toggleComplete}\n      />\n    </div>\n  );\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}